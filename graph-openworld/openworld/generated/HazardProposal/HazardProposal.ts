// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class HazardAdded extends ethereum.Event {
  get params(): HazardAdded__Params {
    return new HazardAdded__Params(this);
  }
}

export class HazardAdded__Params {
  _event: HazardAdded;

  constructor(event: HazardAdded) {
    this._event = event;
  }

  get hazardId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get title(): string {
    return this._event.parameters[1].value.toString();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }

  get latitude(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get longitude(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class HazardProposal__getAllHazardsResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get title(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get latitude(): BigInt {
    return this[3].toBigInt();
  }

  get longitude(): BigInt {
    return this[4].toBigInt();
  }
}

export class HazardProposal__getHazardResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getTitle(): string {
    return this.value1;
  }

  getDescription(): string {
    return this.value2;
  }

  getLatitude(): BigInt {
    return this.value3;
  }

  getLongitude(): BigInt {
    return this.value4;
  }
}

export class HazardProposal__hazardsResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getTitle(): string {
    return this.value1;
  }

  getDescription(): string {
    return this.value2;
  }

  getLatitude(): BigInt {
    return this.value3;
  }

  getLongitude(): BigInt {
    return this.value4;
  }
}

export class HazardProposal extends ethereum.SmartContract {
  static bind(address: Address): HazardProposal {
    return new HazardProposal("HazardProposal", address);
  }

  getAllHazards(): Array<HazardProposal__getAllHazardsResultValue0Struct> {
    let result = super.call(
      "getAllHazards",
      "getAllHazards():((uint256,string,string,int256,int256)[])",
      [],
    );

    return result[0].toTupleArray<HazardProposal__getAllHazardsResultValue0Struct>();
  }

  try_getAllHazards(): ethereum.CallResult<
    Array<HazardProposal__getAllHazardsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllHazards",
      "getAllHazards():((uint256,string,string,int256,int256)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<HazardProposal__getAllHazardsResultValue0Struct>(),
    );
  }

  getHazard(_id: BigInt): HazardProposal__getHazardResult {
    let result = super.call(
      "getHazard",
      "getHazard(uint256):(uint256,string,string,int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(_id)],
    );

    return new HazardProposal__getHazardResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_getHazard(
    _id: BigInt,
  ): ethereum.CallResult<HazardProposal__getHazardResult> {
    let result = super.tryCall(
      "getHazard",
      "getHazard(uint256):(uint256,string,string,int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(_id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HazardProposal__getHazardResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  hazardCount(): BigInt {
    let result = super.call("hazardCount", "hazardCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_hazardCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("hazardCount", "hazardCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hazards(param0: BigInt): HazardProposal__hazardsResult {
    let result = super.call(
      "hazards",
      "hazards(uint256):(uint256,string,string,int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new HazardProposal__hazardsResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_hazards(
    param0: BigInt,
  ): ethereum.CallResult<HazardProposal__hazardsResult> {
    let result = super.tryCall(
      "hazards",
      "hazards(uint256):(uint256,string,string,int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HazardProposal__hazardsResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StoreHazardCall extends ethereum.Call {
  get inputs(): StoreHazardCall__Inputs {
    return new StoreHazardCall__Inputs(this);
  }

  get outputs(): StoreHazardCall__Outputs {
    return new StoreHazardCall__Outputs(this);
  }
}

export class StoreHazardCall__Inputs {
  _call: StoreHazardCall;

  constructor(call: StoreHazardCall) {
    this._call = call;
  }

  get _title(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _latitude(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _longitude(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class StoreHazardCall__Outputs {
  _call: StoreHazardCall;

  constructor(call: StoreHazardCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
